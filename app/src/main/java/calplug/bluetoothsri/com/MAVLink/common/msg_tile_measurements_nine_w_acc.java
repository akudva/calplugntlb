/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE TILE_MEASUREMENTS_NINE_W_ACC PACKING
package calplug.bluetoothsri.com.MAVLink.common;
import calplug.bluetoothsri.com.MAVLink.MAVLinkPacket;
import calplug.bluetoothsri.com.MAVLink.Messages.MAVLinkMessage;
import calplug.bluetoothsri.com.MAVLink.Messages.MAVLinkPayload;
        
/**
* Measurements from 
*/
public class msg_tile_measurements_nine_w_acc extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_TILE_MEASUREMENTS_NINE_W_ACC = 103;
    public static final int MAVLINK_MSG_LENGTH = 113;
    private static final long serialVersionUID = MAVLINK_MSG_ID_TILE_MEASUREMENTS_NINE_W_ACC;


      
    /**
    * Data from magnetometers
    */
    public float mag_data[] = new float[27];
      
    /**
    * Data from accelerometer
    */
    public float acc_data[] = new float[1];
      
    /**
    * Tile this data is from
    */
    public short tile_number;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_TILE_MEASUREMENTS_NINE_W_ACC;
              
        
        for (int i = 0; i < mag_data.length; i++) {
            packet.payload.putFloat(mag_data[i]);
        }
                    
              
        
        for (int i = 0; i < acc_data.length; i++) {
            packet.payload.putFloat(acc_data[i]);
        }
                    
              
        packet.payload.putUnsignedByte(tile_number);
        
        return packet;
    }

    /**
    * Decode a tile_measurements_nine_w_acc message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
         
        for (int i = 0; i < this.mag_data.length; i++) {
            this.mag_data[i] = payload.getFloat();
        }
                
              
         
        for (int i = 0; i < this.acc_data.length; i++) {
            this.acc_data[i] = payload.getFloat();
        }
                
              
        this.tile_number = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_tile_measurements_nine_w_acc(){
        msgid = MAVLINK_MSG_ID_TILE_MEASUREMENTS_NINE_W_ACC;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_tile_measurements_nine_w_acc(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_TILE_MEASUREMENTS_NINE_W_ACC;
        unpack(mavLinkPacket.payload);        
    }

          
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_TILE_MEASUREMENTS_NINE_W_ACC -"+" mag_data:"+mag_data+" acc_data:"+acc_data+" tile_number:"+tile_number+"";
    }
}
        